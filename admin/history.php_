<?php
require_once __DIR__ . '/../inc/header.php';
$pdo = db();

// --- AJAX API ---
if (isset($_POST['ajax']) && $_POST['ajax'] === '1') {
  header('Content-Type: application/json; charset=utf-8');
  $action = $_POST['action'] ?? '';

  // Ensure schema
  try { $pdo->exec("ALTER TABLE history ADD COLUMN channel VARCHAR(32) NULL"); } catch (Throwable $e) {}
  try { $pdo->exec("CREATE INDEX idx_history_created ON history(created_at)"); } catch (Throwable $e) {}
  try { $pdo->exec("CREATE INDEX idx_history_channel_time ON history(channel, created_at)"); } catch (Throwable $e) {}

  if ($action === 'clear') {
    $channel = $_POST['channel'] ?? 'all';
    $from = $_POST['from'] ?? '';
    $to   = $_POST['to'] ?? '';
    $where = [];$args=[];
    if ($channel !== 'all') { $where[] = 'channel = ?'; $args[] = $channel; }
    if ($from) { $where[] = 'created_at >= ?'; $args[] = date('Y-m-d 00:00:00', strtotime($from)); }
    if ($to)   { $where[] = 'created_at <= ?'; $args[] = date('Y-m-d 23:59:59', strtotime($to)); }
    $sql = 'DELETE FROM history' . ($where?(' WHERE '.implode(' AND ', $where)):'');
    $stmt = $pdo->prepare($sql);
    $stmt->execute($args);
    echo json_encode(['ok'=>true, 'deleted'=>$stmt->rowCount()]);
    exit;
  }

  if ($action === 'list') {
    $channel = $_POST['channel'] ?? 'all';
    $term = trim($_POST['term'] ?? '');
    $from = $_POST['from'] ?? '';
    $to   = $_POST['to'] ?? '';
    $page = max(1, (int)($_POST['page'] ?? 1));
    $per  = min(60, max(10, (int)($_POST['per'] ?? 24)));

    $where = [];$args=[];
    if ($channel !== 'all') { $where[] = 'h.channel = ?'; $args[] = $channel; }
    if ($from) { $where[] = 'h.created_at >= ?'; $args[] = date('Y-m-d 00:00:00', strtotime($from)); }
    if ($to)   { $where[] = 'h.created_at <= ?'; $args[] = date('Y-m-d 23:59:59', strtotime($to)); }
    if ($term !== '') {
      $where[] = '(h.question LIKE ? OR h.answer LIKE ? OR u.username LIKE ? OR u.first_name LIKE ? OR u.last_name LIKE ?)';
      for ($i=0;$i<5;$i++) $args[] = '%'.$term.'%';
    }
    // --- Load raw messages (simple query without joins to avoid empty results) ---
    $rows = [];
    $whereSimple = $where ? str_replace('h.', '', implode(' AND ', $where)) : '';
    $sql = 'SELECT user_id, question, answer, created_at, channel FROM history'
         . ($whereSimple ? (' WHERE ' . $whereSimple) : '')
         . ' ORDER BY user_id ASC, created_at ASC, id ASC';
    try {
      $stmt = $pdo->prepare($sql);
      $stmt->execute($args);
      $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (Throwable $e) {
      $rows = [];
    }
    // Extra fallback: if nothing loaded (e.g., wrong WHERE due to alias), pull full table
    if (!$rows) {
      try {
        $stmt = $pdo->query('SELECT user_id, question, answer, created_at, channel FROM history ORDER BY id ASC');
        $rows = $stmt ? $stmt->fetchAll(PDO::FETCH_ASSOC) : [];
      } catch (Throwable $e) {
        $rows = [];
      }
    }
    
    // Build sessions
    $gapSeconds = 45*60; $sessions=[]; $cur=null; $channelCounts=['telegram'=>0,'facebook'=>0,'instagram'=>0,'whatsapp'=>0,'web'=>0,'unknown'=>0];
    $mkId = function($uid,$from,$to){ return rtrim(strtr(base64_encode(json_encode(['u'=>$uid,'from'=>$from,'to'=>$to])), '+/', '-_'), '='); };
    foreach($rows as $r){
      $u=(int)$r['user_id']; $t=strtotime($r['created_at']);
      $name = trim(($r['first_name']??'').' '.($r['last_name']??'')); if($name==='') $name=$r['username']??('ID '.$u);
      $ch=$r['channel']?:'unknown';
      if ($cur===null || $cur['user_id']!==$u || ($t-$cur['last_ts'])>$gapSeconds){
        if($cur!==null){ $cur['end_ts']=$cur['last_ts']; $cur['id']=$mkId($cur['user_id'],$cur['start_ts'],$cur['end_ts']+1); $sessions[]=$cur; $channelCounts[$cur['channel']] = ($channelCounts[$cur['channel']]??0)+1; }
        $cur=['user_id'=>$u,'user_name'=>$name,'channel'=>$ch,'start_ts'=>$t,'last_ts'=>$t,'count'=>1,'preview'=>mb_substr(trim((string)$r['question']),0,120)];
      } else { $cur['last_ts']=$t; $cur['count']++; if(empty($cur['preview'])) $cur['preview']=mb_substr(trim((string)$r['question']),0,120); }
    }
    if($cur!==null){ $cur['end_ts']=$cur['last_ts']; $cur['id']=$mkId($cur['user_id'],$cur['start_ts'],$cur['end_ts']+1); $sessions[]=$cur; $channelCounts[$cur['channel']] = ($channelCounts[$cur['channel']]??0)+1; }
    // sort desc
    usort($sessions, function($a,$b){ return ($b['end_ts'] <=> $a['end_ts']); });
    $total = count($sessions);
    $offset = ($page-1)*$per; $slice = array_slice($sessions, $offset, $per);

    echo json_encode(['ok'=>true,'sessions'=>$slice,'total'=>$total,'has_more'=>($offset+$per<$total),'counts'=>$channelCounts], JSON_UNESCAPED_UNICODE);
    exit;
  }

  echo json_encode(['ok'=>false,'error'=>'unknown action']);
  exit;
}

// Ensure table & indexes exist; add optional channel column
$pdo->exec("CREATE TABLE IF NOT EXISTS history (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id BIGINT NOT NULL,
  question TEXT NOT NULL,
  answer TEXT NOT NULL,
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;");
try { $pdo->exec("ALTER TABLE history ADD COLUMN channel VARCHAR(32) NULL"); } catch (Throwable $e) {}
try { $pdo->exec("CREATE INDEX IF NOT EXISTS idx_history_user_time ON history(user_id, created_at)"); } catch (Throwable $e) {}

// Helper: fetch single session as JSON
if (isset($_GET['session'])) {
  $token = $_GET['session'];
  $meta = json_decode(base64_decode($token), true);
  if (!$meta || !isset($meta['u'],$meta['from'],$meta['to'])) { http_response_code(400); echo json_encode(['ok'=>false,'error'=>'bad token']); exit; }
  $userId = (int)$meta['u'];
  $from = date('Y-m-d H:i:s', (int)$meta['from']);
  $to   = date('Y-m-d H:i:s', (int)$meta['to']);
  $stmt = $pdo->prepare("SELECT question, answer, created_at FROM history WHERE user_id=? AND created_at BETWEEN ? AND ? ORDER BY created_at ASC, id ASC");
  $stmt->execute([$userId, $from, $to]);
  $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
  $msgs = [];
  foreach ($rows as $r) {
    $msgs[] = ['role'=>'user', 'text'=>$r['question'], 'time'=>$r['created_at']];
    $msgs[] = ['role'=>'bot', 'text'=>$r['answer'], 'time'=>$r['created_at']];
  }
  header('Content-Type: application/json; charset=utf-8');
  echo json_encode(['ok'=>true,'messages'=>$msgs], JSON_UNESCAPED_UNICODE);
  exit;
}
?>
<div class="container mx-auto py-6">
  <div class="rounded-2xl border border-white/10 bg-gradient-to-r from-indigo-900/40 to-purple-900/30 p-6 mb-6">
    <h2 class="text-2xl font-bold text-indigo-200 flex items-center gap-2"><i class="fas fa-comments"></i> <?= htmlspecialchars(t('history.sessions')) ?></h2>
    <p class="text-sm text-gray-300/90 mt-1"><?= htmlspecialchars(t('history.sessions.desc')) ?></p>
  </div>

  <div class="flex flex-wrap items-center gap-2 mb-4">
    <span class="text-sm text-gray-400 mr-2"><?= htmlspecialchars(t('filter.by')) ?>:</span>
    <?php
    $filters = [
      'all'=>t('channel.all'),
      'telegram'=>t('channel.telegram'),
      'facebook'=>t('channel.facebook'),
      'instagram'=>t('channel.instagram'),
      'whatsapp'=>t('channel.whatsapp'),
      'web'=>t('channel.web'),
      'unknown'=>t('channel.unknown'),
    ];
    $icons = [
      'all'=>'fas fa-inbox',
      'telegram'=>'fab fa-telegram-plane',
      'facebook'=>'fab fa-facebook-messenger',
      'instagram'=>'fab fa-instagram',
      'whatsapp'=>'fab fa-whatsapp',
      'web'=>'fas fa-globe',
      'unknown'=>'far fa-question-circle',
    ];
    foreach ($filters as $key=>$label): ?>
      <button type="button" data-filter="<?= htmlspecialchars($key) ?>" class="filter-chip inline-flex items-center gap-2 px-3 py-1.5 rounded-full ring-1 ring-white/10 text-gray-300 hover:bg-white/5 bg-white/0 data-[active=true]:bg-indigo-600/20 data-[active=true]:text-indigo-200">
        <i class="<?= htmlspecialchars($icons[$key] ?? 'far fa-circle') ?>"></i>
        <span><?= htmlspecialchars($label) ?></span>
        <span class="text-xs px-1.5 py-0.5 rounded-full bg-white/10">0</span>
      </button>
    <?php endforeach; ?>
    <div class="ml-auto flex items-center gap-2">
      <input id="search" type="text" placeholder="<?= htmlspecialchars(t('search.placeholder')) ?>" class="w-64 px-3 py-2 rounded-lg bg-gray-900/60 text-gray-100 placeholder-gray-400 ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-indigo-500 outline-none transition" />
    </div>
      <div class="flex items-center gap-2">
        <label class="text-xs text-gray-400"><?= htmlspecialchars(t('date.from')) ?></label>
        <input id="dateFrom" type="date" class="px-2 py-1 rounded ring-1 ring-white/10 bg-gray-900/60 text-gray-100" />
        <label class="text-xs text-gray-400"><?= htmlspecialchars(t('date.to')) ?></label>
        <input id="dateTo" type="date" class="px-2 py-1 rounded ring-1 ring-white/10 bg-gray-900/60 text-gray-100" />
        <button id="presetToday" class="px-2 py-1 rounded ring-1 ring-white/10 hover:bg-white/5 text-gray-300"><?= htmlspecialchars(t('preset.today')) ?></button>
        <button id="preset7" class="px-2 py-1 rounded ring-1 ring-white/10 hover:bg-white/5 text-gray-300"><?= htmlspecialchars(t('preset.7d')) ?></button>
        <button id="preset30" class="px-2 py-1 rounded ring-1 ring-white/10 hover:bg-white/5 text-gray-300"><?= htmlspecialchars(t('preset.30d')) ?></button>
        <button id="applyFilters" class="px-3 py-1.5 rounded bg-indigo-600 hover:bg-indigo-700 text-white"><?= htmlspecialchars(t('apply')) ?></button>
        <button id="resetFilters" class="px-3 py-1.5 rounded ring-1 ring-white/10 hover:bg-white/5 text-gray-300"><?= htmlspecialchars(t('reset')) ?></button>
      </div>
      <div class="ml-2">
        <button id="clearHistory" class="px-3 py-1.5 rounded bg-red-600 hover:bg-red-700 text-white"><?= htmlspecialchars(t('clear.history')) ?></button>
      </div>
  </div>

  <div id="sessionGrid" class="grid sm:grid-cols-2 lg:grid-cols-3 gap-4"></div>
  <div id="emptyState" class="hidden text-center text-gray-400 py-20"><?= htmlspecialchars(t('no.sessions')) ?></div>
  <div class="mt-4 flex justify-center">
    <button id="loadMore" class="px-4 py-2 rounded ring-1 ring-white/10 hover:bg-white/5 text-gray-300 hidden"><?= htmlspecialchars(t('load.more')) ?></button>
  </div>
</div>

<!-- Modal -->
<div id="convModal" class="fixed inset-0 z-50 hidden">
  <div class="absolute inset-0 bg-black/60 backdrop-blur-sm"></div>
  <div class="relative max-w-4xl mx-auto bg-gray-900/95 border border-white/10 rounded-2xl mt-12 h-[75vh] grid grid-rows-[auto,1fr,auto]">
    <div class="p-4 flex items-center justify-between border-b border-white/10">
      <div class="flex items-center gap-2 text-indigo-200">
        <i id="modalIcon" class="fas fa-comments"></i>
        <div id="modalTitle" class="font-semibold">—</div>
      </div>
      <button id="modalClose" class="px-3 py-1.5 rounded-lg ring-1 ring-white/10 hover:bg-white/5 text-gray-300"><i class="fas fa-times"></i> <?= htmlspecialchars(t('close')) ?></button>
    </div>
    <div id="modalBody" class="overflow-y-auto p-4 space-y-3">
      <div id="modalLoading" class="text-gray-400"><?= htmlspecialchars(t('loading')) ?></div>
    </div>
    <div class="p-3 border-t border-white/10 flex justify-end">
      <button id="exportTxt" class="px-3 py-1.5 rounded-lg bg-white/10 hover:bg-white/20 text-gray-200"><i class="far fa-file-alt mr-1"></i><?= htmlspecialchars(t('export.txt')) ?></button>
    </div>
  </div>
</div>

<script>(function(){
  const grid = document.getElementById('sessionGrid');
  const chips = document.querySelectorAll('.filter-chip');
  const search = document.getElementById('search');
  const dateFrom = document.getElementById('dateFrom');
  const dateTo = document.getElementById('dateTo');
  const btnApply = document.getElementById('applyFilters');
  const btnReset = document.getElementById('resetFilters');
  const btnClear = document.getElementById('clearHistory');
  const btnMore  = document.getElementById('loadMore');
  const presetToday = document.getElementById('presetToday');
  const preset7 = document.getElementById('preset7');
  const preset30 = document.getElementById('preset30');

  let state = { channel:'all', term:'', from:'', to:'', page:1, per:24, has_more:false };

  function chIcon(ch){
    switch(ch){
      case 'telegram': return 'fab fa-telegram-plane';
      case 'facebook': return 'fab fa-facebook-messenger';
      case 'instagram': return 'fab fa-instagram';
      case 'whatsapp': return 'fab fa-whatsapp';
      case 'web': return 'fas fa-globe';
      default: return 'far fa-question-circle';
    }
  }
  function chLabel(ch){
    switch(ch){
      case 'telegram': return <?= json_encode(t('channel.telegram')) ?>;
      case 'facebook': return <?= json_encode(t('channel.facebook')) ?>;
      case 'instagram': return <?= json_encode(t('channel.instagram')) ?>;
      case 'whatsapp': return <?= json_encode(t('channel.whatsapp')) ?>;
      case 'web': return <?= json_encode(t('channel.web')) ?>;
      default: return <?= json_encode(t('channel.unknown')) ?>;
    }
  }
  function cardHtml(s){
    return `<div class="session-card bg-gradient-to-br from-white/5 to-white/0 border border-white/10 rounded-xl p-4 hover:border-indigo-400/30 hover:-translate-y-0.5 transition" data-channel="${s.channel}" data-id="${s.id}" data-user="${escapeHtml(s.user_name)}">
      <div class="flex items-start justify-between">
        <div class="flex items-center gap-2">
          <div class="w-9 h-9 rounded-lg bg-white/10 grid place-items-center"><i class="${chIcon(s.channel)} text-indigo-300"></i></div>
          <div>
            <div class="font-semibold text-indigo-200 truncate max-w-[11rem]" title="${escapeHtml(s.user_name)}">${escapeHtml(s.user_name)}</div>
            <div class="text-xs text-gray-400">${chLabel(s.channel)}</div>
          </div>
        </div>
        <div class="text-xs text-gray-400 text-right">
          <div>${new Date(s.start_ts*1000).toISOString().slice(0,16).replace('T',' ')}</div>
          <div><?= htmlspecialchars(t('session.duration')) ?>: ${s.duration}</div>
        </div>
      </div>
      <div class="mt-3 text-sm text-gray-200 line-clamp-3">${escapeHtml(s.preview||'')}</div>
      <div class="mt-3 flex items-center justify-between text-sm">
        <span class="text-gray-400">${s.count} <?= htmlspecialchars(t('session.messages')) ?></span>
        <button class="view-btn inline-flex items-center gap-2 text-indigo-300 hover:text-indigo-200"><i class="far fa-eye"></i> <?= htmlspecialchars(t('view.details')) ?></button>
      </div>
    </div>`;
  }
  function escapeHtml(s){return (s||'').replace(/[&<>]/g,c=>({'&':'&amp;','<':'&lt;','>':'&gt;'}[c]));}

  function renderSessions(list, reset){
    if (reset) grid.innerHTML='';
    list.forEach(s=>{ s.duration = new Date((s.end_ts-s.start_ts)*1000).toISOString().substr(11,5); grid.insertAdjacentHTML('beforeend', cardHtml(s)); });
    btnMore.classList.toggle('hidden', !state.has_more);
    document.getElementById('emptyState')?.classList.toggle('hidden', grid.childElementCount>0);
  }

  function updateCounts(counts){
    document.querySelectorAll('.filter-chip').forEach(ch=>{
      const key = ch.getAttribute('data-filter');
      const cnt = (key==='all') ? (counts.__total||0) : (counts[key]||0);
      const badge = ch.querySelector('span:last-child');
      if (badge) badge.textContent = cnt;
    });
  }

  function load(reset=false){
    const fd = new FormData();
    fd.append('ajax','1'); fd.append('action','list');
    Object.entries({channel:state.channel, term:state.term, from:state.from, to:state.to, page:state.page, per:state.per}).forEach(([k,v])=>fd.append(k,v));
    fetch('history.php',{method:'POST', body:fd}).then(r=>r.json()).then(d=>{
      state.has_more = !!d.has_more; const list = (d.sessions||[]); const counts = d.counts||{}; counts.__total = d.total||list.length; renderSessions(list, reset); updateCounts(counts);
    });
  }

  // init filters
  chips.forEach(b=> b.addEventListener('click', ()=>{
    chips.forEach(x=>{ x.classList.remove('active','bg-white/10'); x.dataset.active='false'; });
    b.classList.add('active','bg-white/10'); b.dataset.active='true';
    state.channel = b.getAttribute('data-filter'); state.page=1; load(true);
  }));
  search && search.addEventListener('input', ()=>{ state.term = search.value; state.page=1; load(true); });
  btnMore.addEventListener('click', ()=>{ state.page++; load(false); });

  btnApply.addEventListener('click', ()=>{ state.from=dateFrom.value; state.to=dateTo.value; state.page=1; load(true); });
  btnReset.addEventListener('click', ()=>{ dateFrom.value=''; dateTo.value=''; search.value=''; state={...state, term:'', from:'', to:'', page:1}; chips[0]&&chips[0].click(); load(true); });
  presetToday.addEventListener('click', (e)=>{ e.preventDefault(); const d=new Date(); dateFrom.value=d.toISOString().slice(0,10); dateTo.value=d.toISOString().slice(0,10); btnApply.click(); });
  preset7.addEventListener('click', (e)=>{ e.preventDefault(); const d=new Date(); const d2=new Date(Date.now()-6*86400000); dateFrom.value=d2.toISOString().slice(0,10); dateTo.value=d.toISOString().slice(0,10); btnApply.click(); });
  preset30.addEventListener('click', (e)=>{ e.preventDefault(); const d=new Date(); const d2=new Date(Date.now()-29*86400000); dateFrom.value=d2.toISOString().slice(0,10); dateTo.value=d.toISOString().slice(0,10); btnApply.click(); });

  btnClear.addEventListener('click', (e)=>{ e.preventDefault(); if(!confirm(<?= json_encode(t('confirm.clear')) ?>)) return; const fd=new FormData(); fd.append('ajax','1'); fd.append('action','clear'); fd.append('channel', state.channel); fd.append('from', dateFrom.value); fd.append('to', dateTo.value); fetch('history.php',{method:'POST', body:fd}).then(r=>r.json()).then(()=>{ state.page=1; load(true); }); });

  // initial
  chips[0] && chips[0].classList.add('active','bg-white/10');
  chips[0] && (chips[0].dataset.active='true');
  load(true);

  // Modal
  const modal = document.getElementById('convModal');
  const modalBody = document.getElementById('modalBody');
  const modalLoading = document.getElementById('modalLoading');
  const modalTitle = document.getElementById('modalTitle');
  const modalIcon = document.getElementById('modalIcon');
  document.getElementById('modalClose').addEventListener('click', ()=> modal.classList.add('hidden'));

  function iconFor(channel){
    switch(channel){
      case 'telegram': return 'fab fa-telegram-plane';
      case 'facebook': return 'fab fa-facebook-messenger';
      case 'instagram': return 'fab fa-instagram';
      case 'whatsapp': return 'fab fa-whatsapp';
      case 'web': return 'fas fa-globe';
      default: return 'far fa-question-circle';
    }
  }
  function bubble(role, text, time){
    const side = role==='user' ? 'justify-start' : 'justify-end';
    const bg = role==='user' ? 'bg-white/10' : 'bg-indigo-600/80 text-white';
    const align = role==='user' ? '' : 'text-right';
    const name = role==='user' ? 'User' : 'Bot';
    return `<div class="flex ${side}">
      <div class="max-w-[80%] ${bg} rounded-xl px-3 py-2">
        <div class="text-xs text-gray-300 ${align}">${name} • ${time}</div>
        <div class="whitespace-pre-wrap">${escapeHtml(text)}</div>
      </div>
    </div>`;
  }

  grid && grid.addEventListener('click', function(e){
    const btn = e.target.closest('.view-btn');
    if (!btn) return;
    const card = e.target.closest('.session-card');
    const id = card.getAttribute('data-id');
    const user = card.getAttribute('data-user');
    const channel = card.getAttribute('data-channel');
    modalTitle.textContent = user;
    modalIcon.className = iconFor(channel) + ' mr-2';
    modalBody.innerHTML = '';
    modalLoading.classList.remove('hidden');
    modal.classList.remove('hidden');
    fetch('history.php?session='+encodeURIComponent(id))
      .then(r=>r.json())
      .then(d=>{
        modalLoading.classList.add('hidden');
        if(!d||!d.ok){ modalBody.innerHTML = '<div class="text-red-400">Load error</div>'; return; }
        modalBody.innerHTML = d.messages.map(m=>bubble(m.role, m.text, m.time)).join('');
      })
      .catch(()=>{ modalLoading.classList.add('hidden'); modalBody.innerHTML = '<div class="text-red-400">Load error</div>'; });
  });

  // Export TXT
  document.getElementById('exportTxt').addEventListener('click', ()=>{
    const lines = Array.from(modalBody.querySelectorAll('.flex')).map(el=>el.textContent.trim());
    const blob = new Blob([lines.join('\n')], {type:'text/plain;charset=utf-8'});
    const a = document.createElement('a'); a.href = URL.createObjectURL(blob); a.download = 'conversation.txt'; a.click(); URL.revokeObjectURL(a.href);
  });
})();</script>
<?php require_once __DIR__ . '/../inc/footer.php'; ?>